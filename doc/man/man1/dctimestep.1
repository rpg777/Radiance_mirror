.\" RCSid $Id: dctimestep.1,v 1.9 2014/05/30 00:00:54 greg Exp $"
.TH DCTIMESTEP 1 12/09/09 RADIANCE
.SH NAME
dctimestep - compute annual simulation time-step(s) via matrix multiplication
.SH SYNOPSIS
.B dctimestep
[
.B "\-n nsteps"
][
.B "\-o ospec"
][
.B "\-i{f|d|h}
][
.B "\-o{f|d}
]
.B DCspec
[
.B skyf
]
.br
.B dctimestep
[
.B "\-n nsteps"
][
.B "\-o ospec"
][
.B "\-i{f|d|h}
][
.B "\-o{f|d}
]
.B Vspec
.B Tbsdf.xml
.B Dmat.dat
[
.B skyf
]
.SH DESCRIPTION
.I Dctimestep
has two invocation forms.
In the first form,
.I dctimestep
is given a daylight coefficient specification and an optional sky
vector or matrix, which may be read from the standard input if unspecified.
The daylight coefficients are multiplied against these sky values
and the results are written to the standard output.
This may be a list of color values or a combined Radiance image,
as explained below.
.PP
In the second form,
.I dctimestep
takes four input files, forming a matrix expression.
The first argument is the View matrix file that specifies how window output
directions are related to some set of measured values, such as an array of
illuminance points or images.
This matrix is usually computed by
.I rcontrib(1)
for a particular set of windows or skylight openings.
The second argument is the window transmission matrix, or BSDF, given as
a standard XML description.
The third argument is the Daylight matrix file that defines how sky patches
relate to input directions on the same opening.
This is usually computed using
.I genklemsamp(1)
with
.I rcontrib
in a separate run for each window or skylight orientation.
The last file is the sky contribution vector or matrix,
typically computed by
.I genskyvec(1)
or
.I gendaymtx(1),
and may be passed on the standard input.
This data is assumed by default to be in ASCII format, whereas the
formats of the View and Daylight matrices
are detected automatically if given as binary data.
The
.I \-if
or
.I \-id
option may be used to specify that sky data is in float or double
format, respectively, which is more efficient for large matrices.
The
.I \-ih
option says to check the header to determine the data type.
(Note that binary double data may not be read from stdin without a header.)\0
.PP
The standard output of
.I dctimestep
is either a color vector with as many RGB triplets
as there are rows in the View matrix, or a combined
.I Radiance
picture.
Which output is produced depends on the first argument.
A regular file name will be loaded and interpreted as a matrix to
generate a color results vector.
A file specification containing a '%d' format string will be
interpreted as a list of
.I Radiance
component pictures, which will be summed according to the computed
vector.
.PP
The
.I \-n
option may be used to compute multiple time steps in a
single invocation.
The sky input file must contain the number of
columns specified in each sky patch row, whether it is read
from the standard input or from a file.
The columns do not need to be given on the same
line, so long as the number of values totals 3*Nsteps*Npatches.
Input starts from the first patch at the first time step, then the
first patch at the second time step, and so on.
If the input matrix has a header, then you may use
.I \-n 0
to get the number of columns from the header rather than specifying it.
.PP
The
.I \-o
option may be used to specify a file or a set of output files
to use rather than the standard output.
If the given specification contains a '%d' format string, this
will be replaced by the time step index, starting from 1.
In this way, multiple output pictures may be produced,
or separate result vectors (one per time step).
If the standard output is used or the
.I \-o
option specifies a single output file, then an information header
will precede the output.
This can be removed if desired using the
.I getinfo\(1\)
command with a single hyphen ('-') argument.
.PP
The
.I \-of
or
.I \-od
option may be used to specify IEEE float or double binary output
data, respectively.
This enables
.I dctimestep
to be used as a pure matrix multiplier, as the output file with
header specifying the format is suitable for subsequent calls.
.SH EXAMPLES
To compute workplane illuminances at 3:30pm on Feb 10th:
.IP "" .2i
gensky 2 10 15:30 | genskyvec | dctimestep workplaneDC.dmx > Ill_02-10-1530.dat
.PP
To compute an image at 10am on the equinox from a set of component images:
.IP "" .2i
gensky 3 21 10 | genskyvec | dctimestep dcomp%03d.hdr > view_03-21-10.hdr
.PP
To compute a set of illuminance contributions for Window 1 on
the Winter solstice at 2pm:
.IP "" .2i
gensky 12 21 14 | genskyvec | dctimestep IllPts.vmx Blinds20.xml Window1.dmx > Ill_12-21-14.dat
.PP
To compute Window2's contribution to an interior view at 12 noon on the Summer solstice:
.IP "" .2i
gensky 6 21 12 | genskyvec | dctimestep view%03d.hdr Blinds30.xml
Window2.dmx > view_6-21-12.hdr
.PP
To generate an hourly matrix of sensor value contributions from Skylight3
using a 3-phase calculation, where output columns are time steps:
.IP "" .2i
gendaymtx -of Tampa.wea | dctimestep -if -n 8760 WPpts.vmx
shade3.xml Skylight3.dmx > wp_win3.dat
.IP "" .2i
.PP
Generate a series of pictures corresponding to timesteps
in an annual simulation:
.IP "" .2i
gendaymtx NYCity.wea | dctimestep -n 8760 -o tstep%04d.hdr dcomp%03d.hdr
.PP
To multiply two color matrices (second matrix is IEEE-float with
145 RGB columns) into a IEEE-double result (also 145 RGB columns):
.IP "" .2i
getinfo - < Inp2.fmx | dctimestep -n 145 -if -od Inp1.fmx > Inp1xInp2.dmx
.SH AUTHOR
Greg Ward
.SH "SEE ALSO"
gendaymtx(1), genklemsamp(1), genskyvec(1), getinfo(1),
mkillum(1), rcollate(1), rcontrib(1), rtrace(1), vwrays(1)
