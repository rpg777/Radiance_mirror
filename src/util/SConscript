import os

Import('env') # inherit from parent

mlib = ['$RAD_MLIB']
progs = []

# compose paths
def radbin(name): return os.path.join('$RAD_BUILDBIN', name)
def radlib(name): return os.path.join('$RAD_BUILDLIB', name)
def tclscr(name): return os.path.join('$RAD_BUILDRLIB', 'tcl', name)

cmatrix = env.Object(source='cmatrix.c')
cmbsdf = env.Object(source='cmbsdf.c')

# standard targets
PROGS = [
('findglare', Split('findglare.c glareval.c glaresrc.c setscan.c'),
	['rtpic','rtargs','rtio','rtproc','rtmath','rtpath','rtmem','rterror']),
('glarendx',  Split('glarendx.c'), ['rtpic','rtargs','rtio','rtmath']),
('vwright',   Split('vwright.c'),  ['rtpic','rtargs','rtio','rtmath']),
('vwrays',    Split('vwrays.c'),   ['rtpic','rtargs','rtio','rtmath']),
('rad',       Split('rad.c'),
	['rtpic','rtproc','rtpath','rtmath','rtargs','rtio','rtcont','rtmem','rterror']),
('rpiece',    Split('rpiece.c') + [env.version], # remote magic
	['rtpic','rtargs','rtio','rtproc','rtmath','rtpath','rtmem']),
('ranimate',  ['ranimate.c', '$RAD_NETCOMPAT'],
	['rtpic','rtargs','rtio','rtproc','rtcont','rtmem','rtpath','rtmath',
	'rtnet','rterror','$RAD_SOCKETLIB']),
('dctimestep', Split('dctimestep.c')+[cmatrix, cmbsdf], ['rtall']),
('rttree_reduce', Split('rttree_reduce.c'), ['rtall']),
('rcollate', Split('rcollate.c'), ['rtall']),
('eplus_adduvf', Split('eplus_adduvf.c eplus_idf.c'), ['rtall']),
('rfluxmtx', Split('rfluxmtx.c'), ['rtall']),
('rmtxop', Split('rmtxop.c rmatrix.c')+[cmatrix, cmbsdf], ['rtall']),
('wrapBSDF', Split('wrapBSDF.c'), ['rtall']),
('evalglare', Split('evalglare.c pictool.c'), ['rtall', 'reetz']),
]

for p in PROGS:
	prog = env.Program(target=radbin(p[0]), source=p[1], LIBS=p[2]+mlib)
	progs.append(prog)

# targets with different includes/libs
rs = Split('ranimove.c ranimove1.c ranimove2.c')
ranimove = env.Program(target=radbin('ranimove'), source=rs,
		CPPPATH=env.get('CPPPATH', [])+ ['#src/rt'],
		LIBS=['raycalls','rttrace','rtscene','rtpic','rtfunc','rtmath',
		'rtnet','rtcont','rtmem','rtargs','rtio','rtproc','rtpath','rterror']
		+ mlib)
progs.append(ranimove)
rsensor = env.Program(target=radbin('rsensor'), source='rsensor.c',
		CPPPATH=env.get('CPPPATH', [])+ ['#src/rt'],
		LIBS=['raycalls','rttrace','rtscene','rtpic','rtfunc','rtmath',
		'rtcont','rtmem','rtargs','rtio','rtpath','rterror','rtproc',
		'rtnet','rtlamps'] + mlib)
progs.append(rsensor)

getinfo = env.Program(target=radbin('getinfo'), source='getinfo.c',
		LIBS=['rtio'])
progs.append(getinfo)


# X11 targets
if env.has_key('X11LIB'):
	xincl = env.get('CPPPATH', []) + ['$X11INCLUDE']
	xlibp = env.get('LIBPATH', []) + ['$X11LIB']
	xglaresrc = env.Program(target=radbin('xglaresrc'),
			source=Split('xglaresrc.c') + [env.x11findwind], # XXX remote magic
			LIBPATH=xlibp, CPPPATH=xincl,
			LIBS=['rtpic','rtmath','rtargs','rtio','X11']+ mlib)
	progs.append(xglaresrc)

	# OpenGL targets that also depend on X11
	if env.has_key('OGL'):
		glrad = env.Program(target=radbin('glrad'), source=Split('glrad.c'),
			CPPFLAGS=env.get('CPPFLAGS', []) + ['$RAD_STEREO'],
			LIBPATH=xlibp, CPPPATH=xincl,
			LIBS=['rgl','rtpic','rtscene','rtproc','rtpath','rtargs','rtio',
			'rtmath','rtcont','rtmem','rterror','rtdummy',
			'GL', 'GLU','X11'] + mlib,)
		progs.append(glrad)

if os.name == 'posix': # XXX ignoring trad.wsh
	for s in Split('''objline glare dayfact
			debugcal rlux raddepend compamb vinfo fieldcomb'''):
		Default(env.InstallScript(radbin(s), s + '.csh'))
	for s in Split('''objview objpict
			genambpos genklemsamp genskyvec genBSDF ltview ltpict'''):
		Default(env.InstallScript(radbin(s), s + '.pl'))
	for s in Split('''do_action.tcl do_file.tcl do_options.tcl do_results.tcl
		do_scene.tcl do_views.tcl do_zone.tcl file.hlp getfile.tcl gethelp.tcl
		help.hlp tclIndex trad.hlp trad.icon util.tcl'''):
		Default(env.InstallScript(tclscr(s), s))
	Default(env.InstallTCLScript(radbin('trad'), 'trad.wsh'))
	
# Those don't really work yet
#else:
#	for s in Split('''objview glare rlux '''):
#		prog = env.Program(target=radbin(s), source=s+'.c')
#		progs.append(prog)

Default('#src/util')
env.Install('$RAD_BINDIR', progs)

# vim: set syntax=python:
