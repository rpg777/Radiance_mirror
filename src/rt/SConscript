import os
from build_utils import vstamp

Import('env') # inherit from parent

mlib = env['RAD_MLIB']

# compose paths
def radbin(name): return os.path.join(env['RAD_BUILDBIN'], name)
def radlib(name): return os.path.join(env['RAD_BUILDLIB'], name)

# custom compile flags
dielectric = env.Object(source='dielectric.c',
		CCFLAGS=env.get('CCFLAGS',[]) + ['-DDISPERSE'])

duphead = env.Object(source="duphead.c")
persist = env.Object(source="persist.c")
ambio = env.Object(source="ambio.c")
rayfifo = env.Object(source="rayfifo.c")
raypwin = env.Object(source="raypwin.c")
raycalls = env.Object(source="raycalls.c")


# source and object dependencies
RAY = Split('''ambcomp.c ambient.c freeobjmem.c initotypes.c preload.c
		raytrace.c renderopts.c''') + [ambio]

SURF = Split('''srcsamp.c srcsupp.c srcobstr.c source.c virtuals.c sphere.c
		o_face.c o_cone.c o_instance.c o_mesh.c''')

MAT = Split('''aniso.c normal.c m_clip.c glass.c m_brdf.c m_mirror.c
		m_direct.c m_mist.c fprism.c m_alias.c m_bsdf.c''') + [dielectric]

MOD = Split('p_func.c t_func.c p_data.c t_data.c text.c mx_func.c mx_data.c')

SUP = Split('func.c noise3.c data.c')

# build libraries
rsrc = RAY + SURF + MAT + MOD + SUP
env.Command('Version.c', 'VERSION', vstamp.build_version_c)
env.Depends('Version.c', rsrc)
Version = env.Object(source=['Version.c'])
rlib = env.Library(target=radlib('rttrace'), source=rsrc + [Version])

#if os.name == 'nt': # XXX until we get around fork() and friends
#	rcsrc = Split('raycalls.c')
#else: rcsrc = Split('raycalls.c raypcalls.c')
rcsrc = Split('raycalls.c $RAD_PCALLS')
rclib = env.Library(target=radlib('raycalls'), source=rcsrc)
Default(rclib)

fullib=['rttrace', 'rtscene', 'rtpic', 'rtfunc', 'rtproc', 'rtmath',
	'rtargs', 'rtpath', 'rtio', 'rtcont', 'rtmem', 'rterror']
# build executables
lasrc = ['lookamb.c', ambio]
lookamb = env.Program(target=radbin('lookamb'), source=lasrc,
	LIBS=['rtio', 'rtpic'])
Default(lookamb)
env.Append(RAD_BININSTALL=[env.Install('$RAD_BINDIR', lookamb)])

rtmain = env.Object(source=['rtmain.c'],
		CCFLAGS=env.get('CCFLAGS',[]) + ['-DNICE=4'])
rtsrc = ['rtrace.c', duphead, persist, rtmain, rayfifo, raypwin, raycalls]
rtrace = env.Program(target=radbin('rtrace'), source=rtsrc,
	LIBS=fullib + mlib
	)
Default(rtrace)
env.Append(RAD_BININSTALL=[env.Install('$RAD_BINDIR', rtrace)])

rpsrc = Split('rpmain.c rpict.c srcdraw.c') + [duphead, persist]
rpict = env.Program(target=radbin('rpict'), source=rpsrc,
	LIBS=fullib+['rtnet','$RAD_SOCKETLIB']+mlib)
Default(rpict)
env.Append(RAD_BININSTALL=[env.Install('$RAD_BINDIR', rpict)])

if env.has_key('X11LIB'): # lots of special requirements for rvu
	x11incls = [env['X11INCLUDE']] + env['CPPPATH']
	x11 = env.Object(source='x11.c', CPPPATH=x11incls)
	x11twind = env.Object(source='x11twind.c', CPPPATH=x11incls)
	rvmain = env.Object(source='rvmain.c',
		CCFLAGS=env['CCFLAGS'] + ['-DNICE=6'])
	rv3 = env.Object(source='rv3.c',
		CCFLAGS=env['CCFLAGS']
		)

	devsrc  = Split('devtable.c devcomm.c colortab.c editline.c')
	rvobjs = [x11, x11twind, rv3, rvmain, rlib]
	rvsrc = Split('rview.c rv2.c') + devsrc + rvobjs
	rvu = env.Program(target=radbin('rvu'), source=rvsrc,
		LIBPATH=env['LIBPATH'] + [env['X11LIB']],
		LIBS = (['rtscene', rclib, 'rttrace', 'rtpic', 'rtfunc', 'rtproc', 'rtmath',
			'rtargs', 'rtpath', 'rtio', 'rtcont', 'rtmem', 'rterror',
			'X11'] + mlib)
		#LIBS=fullib + ['X11', rclib] + mlib
		)
	Default(rvu)
	env.Append(RAD_BININSTALL=[env.Install('$RAD_BINDIR', rvu)])

LIBFILES = Split('rayinit.cal')
env.Append(RAD_RLIBINSTALL=[env.Install('$RAD_RLIBDIR', LIBFILES)])

