import os

Import ('env')

# make a modified local copy
meta = env.Copy(LIBS=['rt'] + env['RAD_MLIB'])

# compose paths
def radbin(name): return os.path.join(meta['RAD_BUILDBIN'], name)
def radlib(name): return os.path.join(meta['RAD_BUILDLIB'], name)

#meta.Append(CPPFLAGS = ' -DMDIR=\\"' + meta['RAD_RLIBDIR'] + '\\"')

# some files need an extra flag
MDIRFLAGS = meta.get('CPPFLAGS', []) + [
	'-DMDIR=\\"%s\\"' % os.path.join(meta['RAD_RLIBDIR'], 'meta')]
bgraph = meta.Object(source='bgraph.c', CPPFLAGS=MDIRFLAGS)
igraph = meta.Object(source='igraph.c', CPPFLAGS=MDIRFLAGS)
dgraph = meta.Object(source='dgraph.c', CPPFLAGS=MDIRFLAGS)
gcomp = meta.Object(source='gcomp.c', CPPFLAGS=MDIRFLAGS)
syscalls = meta.Object(source='syscalls.c', CPPFLAGS=MDIRFLAGS)

common = Split('mfio.c misc.c') + [syscalls]

libmeta = meta.StaticLibrary(radlib('meta'),
	Split ('metacalls.c primout.c progname.c') + common)

# standard targets
PROGS = (
('meta2tga', Split('meta2tga.c rplot.c plot.c palloc.c') + common),
('pexpand',  Split('pexpand.c expand.c segment.c palloc.c') + common),
('psort',    Split('psort.c sort.c palloc.c') + common),
('cv',       Split('cv.c cvhfio.c') + common),
('psmeta',   Split('psmeta.c psplot.c') + common),
('plotin',   Split('plotin.c primout.c') + common),
('bgraph',   Split('mgvars.c mgraph.c') + [bgraph, libmeta]),
('igraph',   Split('mgvars.c mgraph.c gcalc.c cgraph.c') + [igraph, libmeta]),
('dgraph',   Split('cgraph.c mgvars.c') + [dgraph]),
('gcomp',    Split('gcalc.c mgvars.c') + [gcomp]),
('plot4',    Split('plot4.c primout.c') + common),
)
for p in PROGS:
	prog = meta.Program(target=radbin(p[0]),
			source=p[1])
	Default(prog)
	env.Append(RAD_BININSTALL=[meta.Install(meta['RAD_BINDIR'], prog)])


lib4014srcs = Split('''arc.c box.c circle.c close.c dot.c erase.c label.c
	line.c linemod.c move.c open.c point.c space.c subr.c''')
lib4014 = env.Library(os.path.join(env['RAD_BUILDLIB'], '4014'),
		source=map(lambda s:os.path.join('lib4014', s), lib4014srcs))

plotsrc = Split('mplot.c plot.c palloc.c')

SPECIAL = (
('mt160l',   Split('mt160l.c') + plotsrc + common), # rt
('mt160',    Split('mt160.c') + plotsrc + common), # rt m
('mtext',    Split('mtext.c primout.c') + common), # rt
('okimate',  Split('okimate.c') + plotsrc + common), # rt
('mx80',     Split('mx80.c') + plotsrc + common), # rt m
('imagew',   Split('imagew.c') + plotsrc + common), # rt m
('impress',  Split('impress.c implot.c imPfuncs.c plot.c') + common), # rt m
('aed5',     Split('aed5.c') + common), # rt m
('tcurve',   Split('tcurve.c tgraph.c primout.c') + common), # m
('tscat',    Split('tscat.c tgraph.c primout.c') + common), # rt m
('tbar',     Split('tbar.c tgraph.c primout.c') + common), # rt m
)
sbin = []
sinst = []
for p in SPECIAL:
	prog = meta.Program(target=radbin(p[0]), source=p[1])
	sbin.append(prog)
	sinst.append(meta.Install(meta['RAD_BINDIR'], prog))
#plotout = meta.Program(target=radbin('plotout'), source=['plotout.c'] + common,
#	LIBS=['plot', '4014', 'rt', 'm'])
#t4014 = meta.Program(target=radbin('t4014'), source=['plotout.c'] + common,
#	LIBS=['4014', 'rt', 'm'], CPPFLAGS=meta.get('CPPFLAGS',[]) + ['-DFORTEK'])
meta.Alias('meta_special', sbin)# + [plotout, t4014])
meta.Alias('meta_special_install', sinst)

# X11 targets
if meta.has_key('X11LIB'):
	meta.Append(CPPPATH=meta['X11INCLUDE'])
	meta.Append(LIBS='X11')
	meta.Append(LIBPATH=meta['X11LIB'])
	x11meta = meta.Program(radbin('x11meta'),
			Split('plotin.c primout.c') + common)
	Default(x11meta)
	env.Append(RAD_BININSTALL=[meta.Install(meta['RAD_BINDIR'], x11meta)])


